=====
DATA:
=====
char ttt [3][3];    /* tic tac toe board */
char player = 'X';  /* the current player, initialized to X to begin with, either X or O */
int choice;         /* the location the player chooses */
int ifWin;          /* checks for a win */
int count;          /* counter; counts number of moves completed */
int i, j;           /* i is row, j is column */
int checkMove;      /* checks if the move is valid; 1 = valid, 0 = invalid;

==========
ALGORITHM:
==========
--print_board--
Print board:
 "     |     |     ", ttt[0][0], ttt[0][1], ttt[0][2]
 "_____|_____|_____" 
 "     |     |     ", ttt[1][0], ttt[1][1], ttt[1][2] 
 "_____|_____|_____"
 "     |     |     ", ttt[2][0], ttt[2][1], ttt[2][2] 
 "     |     |     "

--print_key--
Print key:
 "  1  |  2  |  3  "
 "_____|_____|_____"
 "  4  |  5  |  6  "
 "_____|_____|_____"
 "  7  |  8  |  9  "
 "     |     |     "

--checkWin--
/* checks the board to see if there is a winner
	1 = game is completed with one winner
       -1 = game is completed with no winner
   	0 = game still in progress
*/

/* game is complete with one winner */
if ((ttt[0][0] == player && ttt[0][1] == player && ttt[0][2] == player) /* row 1 */ OR
    (ttt[1][0] == player && ttt[1][1] == player && ttt[1][2] == player) /* row 2 */ OR
    (ttt[2][0] == player && ttt[2][1] == player && ttt[2][2] == player) /* row 3 */ OR
    (ttt[0][0] == player && ttt[1][0] == player && ttt[2][0] == player) /* column 1 */ OR
    (ttt[0][1] == player && ttt[1][1] == player && ttt[2][1] == player) /* column 2 */ OR
    (ttt[0][2] == player && ttt[1][2] == player && ttt[2][2] == player) /* column 3 */ OR
    (ttt[0][0] == player && ttt[1][1] == player && ttt[2][2] == player) /* diagonal 1 */ OR
    (ttt[2][2] == player && ttt[1][1] == player && ttt[0][2] == player)) /* diagonal 2 */ 

	ifWin = 1

/* board full with no winner */
else if (count = 9)
 	ifWin = -1

/* game still in play */
else 
 	ifWin = 0



--checkValidMove--
/* checks to see if user input an available location */
if (ttt[i][j] == ' ')		/* if location has a blank space... */
 	ttt[i][j] = player;	/* ...print board with updated location player input */
	set checkMove to 1	/* move is valid */
else
  	Print: "Choice unavailable. Please choose another location."
	set checkMove to 0	/* move is invalid */



--scanUserInput--
/* scans the user's location choice where they want to mark */
Print:
	"Player __, where would you like to mark?"
do
	"Enter the number of a valid location you would like:  "
	Scan user's location input
	while (choice <= 0 || choice >=10)  /* choice must be greater than 0 and less than 10 */
Print: 
	"You entered: Location __"	    /* prints what location user chose */



--main--
Print instructions:
	"This program allows two users to play tic tac toe. To win, get three of your marks in a row."
	"Player 1 = X || Player 2 = O"

/* board is initialized to have it cleared with spaces */
for (i = 0; i <= 2 ; i++)          /* initialize i=0; as long as i is <=2, perform loop; increment by 1 */
	for (j = 0; j <= 2; j++)   /* initialize j=0; as long as j is <=2, perform loop; increment by 1 */
		ttt[i][j] = ' ';   /* a blank space is being placed into the tic tac toe board */

Call print_board
Call print_key
checkMove = 0;  /* initialize checkMove to 0 */
do

	Call scanUserInput
	switch (choice)
	case 1: 
		i = 0;
		j = 0;
		break;
	case 2: 
		i = 0;
		j = 1;
		break;
	case 3:
		i = 0;
		j = 2;
		break;
	case 4:
		i = 1;
		j = 0;
		break;
	case 5:
		i = 1;
		j = 1;
		break;
	case 6:
		i = 1;
		j = 2;
		break;
	case 7:
		i = 2;
		j = 0;
		break;
	case 8:
		i = 2;
		j = 1;
		break;
	case 9:
		i = 2;
		j = 2;
		break;
	default case: Invalid location. Please select 1-9.
	Call checkValidMove
while (checkMove == 0)   /* 0 means invalid move; this loops if the user inputs a location that is already taken */ 
do
	Call checkWin
while (ifWin == 0)	 /* 0 means game is still in progress; will continue to loop... */ 
			 /* ...unless 1 (winner) or -1 (no winner) is returned from the function */

/* changes the players from X to O and vice versa */
if (player == 'X')
	player = 'O';
else
	player = 'X';
