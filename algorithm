=====
DATA:
=====
char ttt [3][3];   /* tic tac toe board */
int i, j;
char player1, player2;   /* the mark, X or O, the user inputs in the board */
char checkWin;   /* checks for a win */

==========
ALGORITHM:
==========
--board--
Print board:
 "  -  |  -  |  -  ", ttt[0][0], ttt[0][1], ttt[0][2]
 "_____|_____|_____" 
 "  -  |  -  |  -  ", ttt[1][0], ttt[1][1], ttt[1][2] 
 "_____|_____|_____"
 "  -  |  -  |  -  ", ttt[2][0], ttt[2][1], ttt[2][2] 
 "     |     |     "

--key--
Print key:
 "  1  |  2  |  3  "
 "_____|_____|_____"
 "  4  |  5  |  6  "
 "_____|_____|_____"
 "  7  |  8  |  9  "
 "     |     |     "


--checkWin--
/* 
   1 = game is completed with one winner
  -1 = game is completed with no winner
   0 = game still in progress
*/

/* horizontal check for X */
/* row 1 */
if (ttt[0][0] && ttt[0][1] && ttt[0][2] == 'X')
 checkWin = 'X'

/* row 2 */
else if (ttt[1][0] && ttt[1][1] && ttt[1][2] == 'X')
 checkWin = 'X'

/* row 3 */
else if (ttt[2][0] && ttt[2][1] && ttt[2][2] == 'X')
 checkWin = 'X'

/* vertical check for X */
/* column 1 */
else if (ttt[0][0] == ttt[1][0] && ttt[0][0] == ttt[2][0])
 return 1
else if (ttt[0][1] == ttt[1][1] && ttt[0][1] == ttt[2][1])
 return 1
else if (ttt[0][2] == ttt[1][2] && ttt[0][2] == ttt[2][2])
 return 1

/* diagonal check for X */
else if (ttt[0][0] == ttt[1][1] && ttt[0][0] == ttt[2][2])
 return 1
else if (ttt[2][2] == ttt[1][1] && ttt[2][2] == ttt[0][2])
 return 1

/* board full with no winner */
 else if (ttt /* WIP */

 return -1

else 
 return 0

--player1input--
/* Player 1 is 'X' */
Print:
 "Player 1, where would you like to mark?"
 "Enter the number of the location you would like:  "
Scan user's location input
Call function: -switchCaseBoard-
if (location is available)
 Print board with updated location and key
 else
  Print: "Choice unavailable. Please choose another location."



--player2input--
/* Player 2 is 'O' */
Print:
 "Player 2, where would you like to mark?"
 "Enter the number of the location you would like:  "
Scan user's location input
Call function: -switchCaseBoard-
if (location is available)
 Print board with updated location and key
 else
  Print: "Choice unavailable. Please choose another location."



--switchCaseBoard--
case 1: 
 ttt[0][0] =
case 2:
 ttt[0][1] =
case 3: 
 ttt[0][2] =
case 4: 
 ttt[1][0] =
case 5: 
 ttt[1][1] =
case 6: 
 ttt[1][2] = 
case 7: 
 ttt[2][0] =
case 8: 
 ttt[2][1] =
case 9: 
 ttt[2][2] =
default: invalid location



--main--
Print instructions:
 "This program allows two users to play tic tac toe. To win, get three in a row."
 "Player 1 = X || Player 2 = O"
Call function: -board-
Call function: -key-

do
 Call function: -player1input-
 Call function: -player2input-
 while (
